from django.shortcuts import render

from django.shortcuts import render
import requests

def main_page(request):
    return render(request, 'main.html')

def shop_page(request):
    return render(request, 'shop.html')

def about_page(request):
    return render(request, 'about.html')

# def contact_page(request):
#     return render(request, 'contact.html')

def test_page(request):
    return render(request, 'test.html')

TELEGRAM_TOKEN = "7739344621:AAEZmlNEIKmQgb3lZHxSi1IMmPzoNEuTV0Q"
CHAT_ID = "-4982840825"

def send_telegram_message(text: str) -> bool:

    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    data = {
        "chat_id": CHAT_ID,
        "text": text,
    }
    try:
        response = requests.post(url, data=data, timeout=5)
        return response.status_code == 200
    except requests.RequestException:
        return False


def contact_page(request):
    if request.method == "POST":
        first_name = request.POST.get("firstName", "").strip()
        contact_method = request.POST.get("contactMethod", "").strip()
        phone = request.POST.get("phone", "").strip()

        message = (
            "–ù–æ–≤–∏–π –æ–ø—Ç–æ–≤–∏–π –ø–æ–∫—É–ø–µ—Ü—å\n"
            f"–Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ: {first_name}\n"
            f"–ú–µ—Å–µ–Ω–¥–∂–µ—Ä: {contact_method}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
        )

        success = send_telegram_message(message)

        if success:
            info = "–ß—É–¥–æ–≤–æ! –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ–≤–¥–æ–≤–∑—ñ –∑ –≤–∞–º–∏ –∑–≤*—è–∂–µ—Ç—å—Å—è."
        else:
            info = "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."

        return render(request, "contact.html", {"message": info})

    return render(request, "contact.html")


import json
from django.http import JsonResponse
from django.views.decorators.http import require_POST
import json
from django.http import JsonResponse
from django.views.decorators.http import require_POST
from django.views.decorators.csrf import csrf_exempt

@csrf_exempt
@require_POST

def create_order(request):
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ JSON –¥–∞–Ω—ñ –∑ —Ñ–æ—Ä–º–∏
        order_data = json.loads(request.POST.get('order_data', '{}'))
        
        # –í–∏–ª—É—á–∞—î–º–æ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ
        delivery_data = order_data.get('delivery_data', {})
        receiver_info = order_data.get('receiver_info', {})
        products_data = order_data.get('products_data', [])
        total_price = order_data.get('total_price', '0')
        payment_method = order_data.get('payment_method', 'transfer')
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è
        if not receiver_info.get('full_name') or not receiver_info.get('phone'):
            return JsonResponse(
                {'status': 'error', 'message': '–ù–µ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è'},
                status=400
            )
        
        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è Telegram
        message_lines = [
            "üì¶ –ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø",
            "",
            f"üë§ –û—Ç—Ä–∏–º—É–≤–∞—á: {receiver_info.get('full_name', '')}",
            "",
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {receiver_info.get('phone', '')}",
            "",
            f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {delivery_data.get('department_name', '')}",
            "",
            f"üìç –ê–¥—Ä–µ—Å–∞: {delivery_data.get('department_address', '')}",
            "",
            f"üí≥ –°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏: {'–ù–∞–∫–ª–∞–¥–µ–Ω–∏–π –ø–ª–∞—Ç—ñ–∂' if payment_method == 'cash_on_delivery' else '–ü–µ—Ä–µ–∫–∞–∑ –Ω–∞ –∫–∞—Ä—Ç—É'}",
            "",
            "üõí –¢–û–í–ê–†–ò:"
        ]
        
        # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–æ–≤–∞—Ä–∏
        for product in products_data:
            message_lines.append(
                f"- {product.get('name', '')} "
                f"({product.get('quantity', '')} —à—Ç.) - "
                f"{product.get('price', '')} –≥—Ä–Ω"
            )
        
        # –î–æ–¥–∞—î–º–æ –ø—ñ–¥—Å—É–º–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
        message_lines.extend([
            "",
            f"üí∞ –ó–ê–ì–ê–õ–¨–ù–ê –°–£–ú–ê: {total_price} –≥—Ä–Ω",
        ])
        
        # –û–±'—î–¥–Ω—É—î–º–æ –≤—Å—ñ —Ä—è–¥–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        message = "\n".join(message_lines)
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram (–≤–∞—à–∞ —Ñ—É–Ω–∫—Ü—ñ—è)
        send_telegram_message(message)
        
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —É—Å–ø—ñ—à–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        return render(request, 'order_success.html', {
            'order_number': request.session.session_key[:8].upper(),
            'receiver_name': receiver_info.get('full_name')
        })
        
    except json.JSONDecodeError as e:
        return HttpResponseBadRequest("–ø–æ–º–∏–ª–∫–∞ 404")
    except Exception as e:
        return redirect('shop')



# romashkina_app/views.py
from django.shortcuts import render, redirect
from .models import Product
from .cart import Cart
from django.http import HttpResponseBadRequest


from django.http import HttpResponseBadRequest
from django.shortcuts import redirect

def cart_update(request, product_id):
    cart = Cart(request)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∏ (+1 –∞–±–æ -1)
    change_quantity = request.POST.get('change_quantity')

    if change_quantity is None:
        return HttpResponseBadRequest("–ù–µ –≤–∫–∞–∑–∞–Ω–æ –∑–º—ñ–Ω–∏ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–æ–≤–∞—Ä—É.")
    
    try:
        change = int(change_quantity)
    except ValueError:
        return HttpResponseBadRequest("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∑–º—ñ–Ω–∏ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ.")
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É
    current_quantity = cart.cart.get(str(product_id), 0)
    
    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –Ω–æ–≤—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å
    new_quantity = current_quantity + change
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ–± –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–µ –±—É–ª–∞ –º–µ–Ω—à–æ—é –∑–∞ 1
    if new_quantity < 1:
        new_quantity = 1
    
    # –û–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–≤–∞—Ä —É –∫–æ—Ä–∑–∏–Ω—ñ
    cart.add(product_id, new_quantity - current_quantity)  # –ø–µ—Ä–µ–¥–∞—î–º–æ —Ä—ñ–∑–Ω–∏—Ü—é
    
    return redirect('cart_detail')  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞–∑–∞–¥ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –∫–æ—Ä–∑–∏–Ω–∏

def cart_clear(request):
    cart = Cart(request)
    cart.remove()  # –æ—á–∏—â–∞—î–º–æ –∫–æ—Ä–∑–∏–Ω—É
    return redirect('shop')  # —Ä–µ–¥—ñ—Ä–µ–∫—Ç –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –∫–æ—Ä–∑–∏–Ω–∏

def shop_page(request):
        products = Product.objects.all()
        cart = Cart(request)
        total_items = cart.get_total_quantity()  # –Ω–æ–≤–∞ –∑–º—ñ–Ω–Ω–∞

        return render(request, 'shop.html', {
            'products': products,
            'cart_count': total_items,       # –ø–µ—Ä–µ–¥–∞—î–º–æ —ó—ó –≤ —à–∞–±–ª–æ–Ω
        })

def cart_add(request, product_id):
    cart = Cart(request)
    cart.add(product_id=product_id, quantity=1)  # –¥–æ–¥–∞—î–º–æ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
    return redirect('shop')  # –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–µ–¥—ñ—Ä–µ–∫—Ç–∏–º–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –∫–æ—Ä–∑–∏–Ω–∏


def cart_detail(request):
    cart = Cart(request)
    return render(request, 'cart.html', {
        'cart_items': list(cart),
        'total_price': cart.get_total_price()
    })


def cart_remove(request, product_id):
    cart = Cart(request)
    cart.remove(product_id)
    return redirect('cart_detail')  # –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–µ–¥—ñ—Ä–µ–∫—Ç–∏–º–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –∫–æ—Ä–∑–∏–Ω–∏




